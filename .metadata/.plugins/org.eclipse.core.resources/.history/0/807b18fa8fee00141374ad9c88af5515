package dc.aap;

import soot.*;
import soot.util.*;

import java.util.*;

import soot.jimple.*;
import soot.jimple.internal.JInstanceFieldRef;
import soot.jimple.internal.JNewExpr;
import soot.jimple.internal.JimpleLocal;
import soot.toolkits.graph.*;
import soot.toolkits.scalar.*;

class PointsToGraphAnalysis extends ForwardFlowAnalysis
{
    protected void copy(Object src, Object dest)
    {
        FlowSet srcSet  = (FlowSet) src;
        FlowSet destSet = (FlowSet) dest;
            
        srcSet.copy(destSet);
    }

    protected void merge(Object src1, Object src2, Object dest)
    {
        FlowSet srcSet1 = (FlowSet) src1;
        FlowSet srcSet2 = (FlowSet) src2;
        FlowSet destSet = (FlowSet) dest;

        srcSet1.union(srcSet2, destSet);
    }

    protected void flowThrough(Object srcValue, Object unit,
            Object destValue)
    {
        FlowSet dest = (FlowSet) destValue;
        FlowSet src  = (FlowSet) srcValue;
        Unit    s    = (Unit)    unit;
        src.copy (dest);

//        // KILL
//        // Take out kill set
//        Iterator boxIt = s.getDefBoxes().iterator();
//        while (boxIt.hasNext()) {
//            ValueBox box = (ValueBox) boxIt.next();
//            Value value = box.getValue();
//            if (value instanceof Local)
//                dest.remove(value);
//        }

        // GEN
        // Add gen set
        int lineNumber = s.getJavaSourceStartLineNumber();
        if (s.getDefBoxes().size() > 0 && s.getUseBoxes().size() > 0){ // solo soportamos 1 solo uso por enunciado de TP
        	ValueBox left = s.getDefBoxes().get(0);
        	Value leftValue = left.getValue();
        	ValueBox right = s.getUseBoxes().get(0);
        	Value rightValue = right.getValue();
        	
        	if (leftValue instanceof JimpleLocal) { // x = ..
        		if (rightValue instanceof JNewExpr) { //x = new A()
            		Tupla<Value,Value> pair = new Tupla<Value,Value>(leftValue,rightValue);
                	dest.add(pair);
    			}
            	else if (rightValue instanceof JimpleLocal) {//x = y
            		for (Tupla<Value, Value> relation : dest) {
						
					}
            		Tupla<Value,Value> pair = new Tupla<Value,Value>(leftValue,rightValue);
                	dest.add(pair);
    			}
            	else if (rightValue instanceof JInstanceFieldRef) { // x = y.f
            		
            	}
        		
        	} 
        	else if (leftValue instanceof JInstanceFieldRef) { // x.f = 
            	if (rightValue instanceof JimpleLocal) {//x.f = y
            		
            		Tupla<Value,Value> pair = new Tupla<Value,Value>(leftValue,rightValue);
                	dest.add(pair);
    			}
        		
        	}
        	
        	
        	
        	
        	
        }
    }

    protected Object entryInitialFlow()
    {
        return new ArraySparseSet();
    }
        
    protected Object newInitialFlow()
    {
        return new ArraySparseSet();
    }

    PointsToGraphAnalysis(DirectedGraph g)
    {
        super(g);

        doAnalysis();
    }
}
